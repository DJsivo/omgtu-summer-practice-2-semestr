#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №10. Доставка сообщений до Команды.

**Цель:** Предоставить возможность обмена данными для длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Отправлять сообщения длительной операции.

## Задание.
Поскольку длительная операция выполняется в течение некоторого момента времени, то может возникнуть необходимость
в предоставлении дополнительной информации, влияющей на ход выполнения. Поскольку Команды и источник данных часто находятся в разных потоках,
то сделать это надо потоко-безопасным образом. Самый простой способ - используя идиому Производитель-Поребитель, в нашем случае - очередь.

Набор данных, предназначенных для Команды будем называть сообщением. Можно использовать любую подходящую конструкцию языка программирования для 
представления сообщения. Необходимо учесть, что скорость доставки сообщений может быть выше, чем скорость обработки, а значит очередь сообщений должна быть
у каждой Длительной операции. При этом потоко-безопасные очереди требуют системных ресурсов, а значит, чтобы не получить ограничение на максимальное количество
одновремнно работающих длительных Команд, нельзя использовать потоко-безопасные очереди. 

Возможный вариант реализации - оставить одну потоко-безопасную очередь для потока, а для Команд использовать обычные очереди. Осталось только решить, как сообщение
излеченное из очереди потока попадет в очередь Команды. Один из возможных вариантов:
1. Каждая команда имеет уникальный идентификатор.
2. Сообщение содержит уникальный идентификатор Команлды, которому оно адресовано.
3. Для потока создаем специальную Длительную Команду, которая назвается Роутером. Он хранит коллекцию пар (id Команды, ссылка на очередь Команды). При вызове метода Execute этой 
Роутера, если очередь потока не пуста, происходит чтение очередного сообщения и по id Команды определяется очередь, куда это сообщение записывается.
Если id Команды не определен, на консоль выводится сообщение о невозможности доставить сообщение неизвестному адресату.
При старте новой Команды, ее очередь необходимо добавить в коллекцию Роутера. При остановке Команды - очередь удаляется из коллекции Роутера.

Продемонстрировать работу Роутера на двух Длительных Командах и на отправке сообщения несуществующей Команде.

**Материалы для самостоятельного изучения**.
1. [Паттерн Сообщение](https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html)
2. [Паттерн Роутер - весь раздел про Роутеры](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageRoutingIntro.html)
3. [Обмен сообщеними](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageConstructionIntro.html)

#!csharp

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#!csharp

public interface ICommand
{
    void Execute();
}

public class TestCommand : ICommand
{
    private int id;
    private int counter = 0;
    private Queue<string> messages = new Queue<string>();

    public TestCommand(int id)
    {
        this.id = id;
    }

    public void Execute()
    {
        while (messages.Count > 0)
        {
            string message = messages.Dequeue();
            Console.WriteLine($"Команда {id}, обработка сообщения: {message}");
        }
        Console.WriteLine($"Команда {id} вызов {++counter}");
    }

    public void EnqueueMessage(string message)
    {
        messages.Enqueue(message);
    }

    public int Id => id;
    public Queue<string> Messages => messages;
}

#!csharp

public class RouterCommand : ICommand
{
    private ConcurrentQueue<(int CommandId, string Message)> routerQueue = new ConcurrentQueue<(int CommandId, string Message)>();
    private Dictionary<int, TestCommand> commandDict = new Dictionary<int, TestCommand>();

    public void Execute()
    {
        while (routerQueue.TryDequeue(out var item))
        {
            if (commandDict.ContainsKey(item.CommandId))
            {
                commandDict[item.CommandId].EnqueueMessage(item.Message);
            }
            else
            {
                Console.WriteLine($"Неизвестный адресат: {item.CommandId}");
            }
        }
    }

    public void EnqueueMessage(int commandId, string message)
    {
        routerQueue.Enqueue((commandId, message));
    }

    public void RegisterCommand(TestCommand command)
    {
        commandDict[command.Id] = command;
    }

    public void UnregisterCommand(int commandId)
    {
        commandDict.Remove(commandId);
    }
}

#!csharp

public class TaskScheduler
{
    private readonly BlockingCollection<ICommand> _commands = new BlockingCollection<ICommand>();
    private CancellationTokenSource _cts = new CancellationTokenSource();
    private Task _task;
    private RouterCommand _router;

    public TaskScheduler()
    {
        _router = new RouterCommand();
        _task = Task.Run(() => ProcessCommands(_cts.Token));
    }

    private void ProcessCommands(CancellationToken token)
    {
        try
        {
            foreach (var command in _commands.GetConsumingEnumerable(token))
            {
                command.Execute();
            }
        }
        catch (OperationCanceledException)
        {
            
        }
    }

    public void AddCommand(ICommand command)
    {
        _commands.Add(command);
        if (command is TestCommand testCommand)
        {
            _router.RegisterCommand(testCommand);
        }
    }

    public void RemoveCommand(ICommand command)
    {
        if (command is TestCommand testCommand)
        {
            _router.UnregisterCommand(testCommand.Id);
        }
    }

    public void AddMessage(int commandId, string message)
    {
        _router.EnqueueMessage(commandId, message);
    }

    public void HardStop()
    {
        _cts.Cancel();
        _commands.CompleteAdding();
        try
        {
            _task.Wait();
        }
        catch (AggregateException ae)
        {
            ae.Handle(e => e is OperationCanceledException);
        }
    }
}

#!csharp

TaskScheduler scheduler = new TaskScheduler();

        List<TestCommand> commands = new List<TestCommand>();
        for (int i = 0; i < 2; i++)
        {
            var command = new TestCommand(i);
            commands.Add(command);
            scheduler.AddCommand(command);
        }

        scheduler.AddMessage(0, "Сообщение для команды 0");
        scheduler.AddMessage(1, "Сообщение для команды 1");
        scheduler.AddMessage(2, "Сообщение для несуществующей команды");

        Thread.Sleep(1000); // Даем немного времени на выполнение команд

        scheduler.HardStop();
